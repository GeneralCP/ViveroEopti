name: "Vivero E-optimization"
description: "addon which supplies several API endpoints for optimizing and monitoring a home battery PV system in the Netherlands"
version: "0.1.33"
slug: "e-opti"
init: false
arch:
  - aarch64
  - amd64
  - armhf
  - armv7
  - i386
startup: services
ports:
  8000/tcp: 8000

webui: http://[HOST]:[PORT:8000]
map:
  - config:rw
  - share:rw

#Home Assistant detials
options:
  HA:
    IP: '192.168.2.101'
    port: '8123'
    accesstoken: 'xxx'

  #solar forecast installation details
  PVinstallations:
    - latitude: 0.000000
      longitude: 0.000000
      declination: 45
      azimuth: 80
      kwp: 3.75
    - latitude: 0.000000
      longitude: 0.000000
      declination: 15
      azimuth: 80
      kwp: 3.0 

  #battery (all values in kW or kWh)
  Battery:
    #max capacity of battery 
    maxcapacity: 28.68
    #use lower than maximum if you want to limit your inverter. this is usually more efficient
    maxdischarge: 5.0
    maxcharge: 5.0
    #max and min SOC you want to use for optimization. OPtimization will never go above or below this SOC
    minSOC: 0.1
    maxSOC: 1.0
    #charge and discharge efficiency for the battery. 
    eta: 0.92
    #entity id for getting SOC in HA
    entity_id: 'victron_battery_soc_223'



  #costs
  Costs:
    # energiebelasting stroom incl. BTW per kWh
    energy_tax: 0.152448
    # opslag levering van energiemaatschappij per kWh
    delivery_cost: 0.02178
    feedback_rebate: 0.02178
    # BTW percentage (decimaal)
    btw: 0.21
    # Salderingspercentage (decimaal)
    saldering_percentage: 1.0
    # Entso-e country code (for getting prices)
    country_code: 'NL'
    # Entso-e API key
    api_key: 'xxx'
    # Entso-e used timezone (as pandas timestamp timezone, list at: https://gist.github.com/heyalexej/8bf688fd67d7199be4a1682b3eec7568)
    tz: 'Europe/Amsterdam'
    # percentage loss of one way battery trip in decimals (this increases cost above eta. Only use if you want to cost in the write-off of your battery as well. This will decrease battery use significantly at any cost)
    bat_loss: 0.00

  #energy prediction
  Eprediction:
    energy_demand_sensor: 'inverter_output_total'
    outside_temperature_sensor: 'openweathermap_temperature'
    timezone: 'Europe/Amsterdam'
    influxdb_ip: '192.168.2.101'
    influxdb_port: 8086
    influxdb_username: 'username'
    influxdb_password: 'password'
    influxdb_database: 'homeassistant'
    influxdb_version: 1
    #only when using influx db version 2
    influxdb_token: "aaaaaaaaaaa"
    influxdb_organization: "organization"

  #holiday used in energy prediction exogenous variables
  Holiday:
    - start: '2023/07/08'
      end: '2023/07/29'
    - start: '2023/05/18'
      end: '2023/05/21'
    - start: '2023/05/26'
      end: '2023/05/29'    


  #temp forecast
  TempForecast:
    lat: 0.000000
    lon: 0.000000
    appid: 'openweathermap appid'

  #optimization options

  Optimization:
    #max feed in or feedback to/from GRID
    gridinmax: 15.0
    gridoutmax: 15.0

    #GRID slack. This percentage of the daily load is allowed to be taken from the GRID instead of solar. Set this to 100.0 to allow unlimited GRID usage. If this is set to 0. Model will only take from GRID when solar or battery is insufficient
    GRIDSlack: 0.002
    #SOC slack. When optimization is run with fixSOC option. This option allows some slack. Settings this to 0.1 allows end SOC to be 10% lower or higher. lower than 0.1 not advisable
    SOCSlack: 0.0
    #MIN ending SOC. Prevents SOC going below this state at the end of optimization run. Is ignored when option smartSOC is used
    MinEndSOC: 0.95
    #Smart endSOC. if forecast dynamic prices are higher for the day after tomorrow. use HighSOC else use LOWSOC.
    HighSOC: 0.9
    LowSOC: 0.25
  
  #sensors used to fill realized historical values during optimization window
  #only fill when you want to compare the forecast to realized values. e.g. compare energy forecast with real consumption in home assistant. 
  Sensors:
    SOC: 'victron_battery_soc_223'
    PV: 'solaredge_ac_power'
    Consumption: 'inverter_output_total'
    GRID: 'grid_total_power'

schema:
  HA:
    IP: str
    port: str
    accesstoken: str

  #solar forecast installation details
  PVinstallations:
    - latitude: float
      longitude: float
      declination: int
      azimuth: int
      kwp: float
    - latitude: float
      longitude: float
      declination: int
      azimuth: int
      kwp: float

  #battery (all values in kW or kWh)
  Battery:
    #max capacity of battery 
    maxcapacity: float
    #use lower than maximum if you want to limit your inverter. this is usually more efficient
    maxdischarge: float
    maxcharge: float
    #max and min SOC you want to use for optimization. OPtimization will never go above or below this SOC
    minSOC: float
    maxSOC: float
    #charge and discharge efficiency for the battery. 
    eta: float
    #entity id for getting SOC in HA
    entity_id: str



  #costs
  Costs:
    # energiebelasting stroom incl. BTW per kWh
    energy_tax: float
    # opslag levering van energiemaatschappij per kWh
    delivery_cost: float
    feedback_rebate: float
    # BTW percentage (decimaal)
    btw: float
    # Salderingspercentage (decimaal)
    saldering_percentage: float
    # Entso-e country code (for getting prices)
    country_code: str
    # Entso-e API key
    api_key: str
    # Entso-e used timezone (as pandas timestamp timezone, list at: https://gist.github.com/heyalexej/8bf688fd67d7199be4a1682b3eec7568)
    tz: str
    # percentage loss of one way battery trip in decimals (this increases cost above eta. Only use if you want to cost in the write-off of your battery as well. This will decrease battery use significantly at any cost)
    bat_loss: float

  #energy prediction
  Eprediction:
    energy_demand_sensor: str
    outside_temperature_sensor: str
    timezone: str
    influxdb_ip: str
    influxdb_port: int
    influxdb_username: str
    influxdb_password: str
    influxdb_database: str
    influxdb_version: int
    influxdb_token: str
    influxdb_organization: str

  #holiday used in energy prediction exogenous variables
  Holiday:
    - start: str
      end: str
    - start: str
      end: str
    - start: str
      end: str    


  #temp forecast
  TempForecast:
    lat: float
    lon: float
    appid: str

  #optimization options

  Optimization:
    #max feed in or feedback to/from GRID
    gridinmax: float
    gridoutmax: float

    #GRID slack. This percentage of the daily load is allowed to be taken from the GRID instead of solar. Set this to 100.0 to allow unlimited GRID usage. If this is set to 0. Model will only take from GRID when solar or battery is insufficient
    GRIDSlack: float
    #SOC slack. When optimization is run with fixSOC option. This option allows some slack. Settings this to 0.1 allows end SOC to be 10% lower or higher. lower than 0.1 not advisable
    SOCSlack: float
    #MIN ending SOC. Prevents SOC going below this state at the end of optimization run. Is ignored when option smartSOC is used
    MinEndSOC: float
    #Smart endSOC. if forecast dynamic prices are higher for the day after tomorrow. use HighSOC else use LOWSOC.
    HighSOC: float
    LowSOC: float

  Sensors:
    SOC: str
    PV: str
    Consumption: str
    GRID: str

